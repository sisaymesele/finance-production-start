# Generated by Django 5.2.6 on 2025-09-19 11:13

import datetime
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EmploymentIncomeTaxBracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rate', models.DecimalField(decimal_places=2, help_text='Percentage rate (e.g., 10 for 10%)', max_digits=5)),
                ('deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
            ],
            options={
                'ordering': ['min_amount'],
            },
        ),
        migrations.CreateModel(
            name='FuelForWorkRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary_divisor', models.DecimalField(decimal_places=2, default=Decimal('4.00'), help_text='Divisor for salary to compute fuel limit (e.g., 4 means salary/4)', max_digits=5)),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('2200.00'), help_text='Maximum non-taxable cap for fuel for work', max_digits=10)),
            ],
            options={
                'verbose_name': 'Fuel for work Rate',
                'verbose_name_plural': 'Fuel for work Rate',
            },
        ),
        migrations.CreateModel(
            name='FuelHomeToOfficeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('600.00'), help_text='Maximum non-taxable amount for fuel home to office', max_digits=10)),
            ],
            options={
                'verbose_name': 'Fuel Home to Office Rate',
                'verbose_name_plural': 'Fuel Home to Office Rate',
            },
        ),
        migrations.CreateModel(
            name='HardshipAllowanceRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environment', models.CharField(choices=[('adverse', 'Adverse'), ('very_adverse', 'Very Adverse'), ('extremely_adverse', 'Extremely Adverse')], max_length=30, unique=True)),
                ('limit_percent', models.DecimalField(decimal_places=2, help_text='Percentage of basic salary allowed as non-taxable', max_digits=5)),
            ],
            options={
                'verbose_name': 'Hardship Allowance Rate',
                'verbose_name_plural': 'Hardship Allowance Rate',
            },
        ),
        migrations.CreateModel(
            name='OrganizationalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_name', models.CharField(max_length=80, unique=True)),
                ('organization_address', models.CharField(max_length=80)),
                ('employer_tin', models.CharField(max_length=90, verbose_name='Employer TIN')),
                ('organization_type', models.CharField(choices=[('sole_proprietorship', 'Sole Proprietorship'), ('partnership', 'Partnership'), ('corporation', 'Corporation'), ('joint_venture', 'Joint Venture'), ('cooperative', 'Cooperative'), ('non_profit', 'Non Profit'), ('non_governmental', 'Non Governmental'), ('governmental', 'Governmental'), ('other', 'Other')], max_length=70)),
                ('sector_name', models.CharField(choices=[('education', 'Education'), ('healthcare', 'Healthcare & Medical Services'), ('information_technology', 'Information Technology & Digital Services'), ('finance_banking', 'Finance, Banking & Insurance'), ('agriculture', 'Agriculture & Agribusiness'), ('manufacturing', 'Manufacturing & Industry'), ('energy_utilities', 'Energy & Utilities'), ('environment_sustainability', 'Environment & Sustainability'), ('transport_logistics', 'Transportation & Logistics'), ('tourism_hospitality', 'Tourism, Travel & Hospitality'), ('construction_real_estate', 'Construction & Real Estate'), ('telecommunications', 'Telecommunications'), ('research_development', 'Research & Development'), ('public_sector', 'Government & Public Administration'), ('creative_media', 'Creative Arts, Media & Entertainment'), ('retail_wholesale', 'Retail & Wholesale Trade'), ('ecommerce', 'E-commerce & Online Retail'), ('professional_services', 'Professional & Business Services'), ('hospitality_food', 'Hospitality & Food Services'), ('mining_resources', 'Mining, Oil & Natural Resources')], max_length=50, unique=True)),
                ('contact_personnel', models.CharField(max_length=90)),
            ],
            options={
                'verbose_name': 'Organizational Profile',
                'verbose_name_plural': '               Organizational Profile',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='OvertimeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.CharField(choices=[('evening', '6PM to 4PM'), ('night', '4PM to 6AM'), ('rest_day', 'Weekly Rest Day'), ('public_holiday', 'Public Holiday')], help_text='Type of overtime component', max_length=20, unique=True)),
                ('multiplier', models.DecimalField(decimal_places=2, default=1.0, help_text='Multiplier to apply to base hourly rate', max_digits=5)),
            ],
            options={
                'verbose_name': 'Overtime Rate',
                'verbose_name_plural': 'Overtime Rate',
            },
        ),
        migrations.CreateModel(
            name='PensionRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personnel_rate', models.DecimalField(decimal_places=4, default=Decimal('0.00'), help_text='Percentage of salary contributed by personnel', max_digits=5)),
                ('employer_rate', models.DecimalField(decimal_places=4, default=Decimal('0.00'), help_text='Percentage of salary contributed by employer', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerDiemRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('working_area', models.CharField(choices=[('government_official', 'Government Official'), ('non_governmental_manager', 'Non Governmental Manager'), ('deputy_non_governmental_manager', 'Deputy Non Governmental Manager'), ('non_governmental_expert', 'Non Governmental Expert'), ('construction_machinery_operator', 'Construction Machinery Operator'), ('other', 'Other')], max_length=50, unique=True)),
                ('percent_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Limit as percentage of salary', max_digits=5, null=True)),
                ('cap_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Cap in birr', max_digits=10, null=True)),
                ('fully_non_taxable', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TransportForWorkRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary_divisor', models.DecimalField(decimal_places=2, default=Decimal('4.00'), help_text='Divisor for salary to compute transport limit (e.g., 4 means salary/4)', max_digits=5)),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('2200.00'), help_text='Maximum non-taxable cap for transport for work', max_digits=10)),
            ],
            options={
                'verbose_name': 'Transport for work Rate',
                'verbose_name_plural': 'Transport for work Rate',
            },
        ),
        migrations.CreateModel(
            name='TransportHomeToOfficeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('600.00'), help_text='Maximum non-taxable amount for transport home to office', max_digits=10)),
            ],
            options={
                'verbose_name': 'Transport Home to Office Rate',
                'verbose_name_plural': 'Transport Home to Office Rate',
            },
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mission_statement', models.CharField(max_length=500)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PayrollPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(choices=[('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040')], default='2025', help_text='payroll processing year', max_length=4)),
                ('month', models.CharField(choices=[('01', 'September'), ('02', 'October'), ('03', 'November'), ('04', 'December'), ('05', 'January'), ('06', 'February'), ('07', 'March'), ('08', 'April'), ('09', 'May'), ('10', 'June'), ('11', 'July'), ('12', 'August')], default='September', help_text='payroll processing month', max_length=12)),
                ('payroll_month', models.CharField(blank=True, max_length=70)),
                ('slug', models.SlugField(unique=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
            options={
                'verbose_name': '              Strategic Cycle',
                'verbose_name_plural': '              Strategic Cycles',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Stakeholder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stakeholder_name', models.CharField(help_text='Stakeholder name or organization', max_length=200)),
                ('stakeholder_type', models.CharField(choices=[('internal', 'Internal'), ('external', 'External')], max_length=20)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('executive', 'Executive'), ('employee', 'Employee'), ('manager', 'Manager'), ('team_lead', 'Team Lead'), ('developer', 'Developer'), ('designer', 'Designer'), ('qa', 'Quality Assurance'), ('sales', 'Sales'), ('marketing', 'Marketing'), ('customer', 'Customer'), ('partner', 'Partner'), ('supplier', 'Supplier'), ('investor', 'Investor'), ('regulator', 'Regulator'), ('community', 'Community'), ('other', 'Other')], max_length=50)),
                ('department', models.CharField(blank=True, help_text='Optional department or team', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='Brief description of the stakeholder', null=True)),
                ('impact_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('interest_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('engagement_strategy', models.CharField(choices=[('inform', 'Inform'), ('consult', 'Consult'), ('involve', 'Involve'), ('collaborate', 'Collaborate'), ('empower', 'Empower')], default='inform', max_length=20)),
                ('influence_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Quantitative measure of influence', max_digits=5)),
                ('priority', models.PositiveIntegerField(default=0, help_text='Calculated from impact x interest x influence')),
                ('satisfaction_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Stakeholder satisfaction with the project or SaaS', max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Potential risk if stakeholder is disengaged', max_length=20)),
                ('contribution_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Estimated contribution to strategic objectives', max_digits=5)),
                ('contact_info', models.CharField(blank=True, help_text='Email, phone, or other contact details', max_length=200, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional observations or comments', null=True)),
                ('depends_on', models.ManyToManyField(blank=True, help_text='Other stakeholders this stakeholder depends on or influences', related_name='influences', to='management_project.stakeholder')),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
            options={
                'ordering': ['-priority', 'stakeholder_name'],
            },
        ),
        migrations.CreateModel(
            name='SeverancePay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severance_type', models.CharField(choices=[('normal', 'Normal Termination of contract'), ('no_notice', 'Termination Without Prior Notice'), ('harassment', 'Sexual Harassment')], default='normal', max_length=150)),
                ('last_week_daily_wages', models.DecimalField(decimal_places=2, help_text='Enter the daily wage amount for the last week. If the amount is the same throughout the month, divide the this_month_total salary by 30.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('start_date', models.DateField(help_text='Enter the start date of employment.', verbose_name='Service Start Date')),
                ('end_date', models.DateField(default=datetime.date.today, help_text='Enter the end date of employment.', verbose_name='Service End Date')),
                ('service_years', models.PositiveIntegerField(blank=True)),
                ('service_days', models.PositiveIntegerField(blank=True)),
                ('severance_for_years', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('severance_for_days', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('gross_severance_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('basic_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('prorate_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('employment_income_tax_from_basic_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('total_employment_income_tax_from_basic_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('employment_income_tax_from_prorate_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('employment_income_tax_from_severance_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('net_severance_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
                ('severance_record_month', models.ForeignKey(help_text='Severance processing month', on_delete=django.db.models.deletion.PROTECT, to='management_project.payrollperiod')),
                ('personnel_full_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='personnel_severance_pay', to='management_project.stakeholder')),
            ],
            options={
                'verbose_name': '             Severance Pay',
                'verbose_name_plural': '             Severance Pay',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='StrategicActionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_type', models.CharField(choices=[('Lead', 'Lead'), ('Lagg', 'Lagg')], max_length=10)),
                ('direction_of_change', models.CharField(choices=[('Increasing', 'Increasing'), ('Decreasing', 'Decreasing')], max_length=10)),
                ('baseline', models.DecimalField(decimal_places=2, max_digits=22)),
                ('target', models.DecimalField(decimal_places=2, max_digits=22)),
                ('improvement_needed', models.DecimalField(blank=True, decimal_places=2, max_digits=22, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the strategic plan', max_length=20)),
                ('weight', models.DecimalField(decimal_places=2, default=100, help_text='Weight of this Action Plan KPI relative to other KPI per strategic cycle', max_digits=5)),
                ('slug', models.SlugField(blank=True, max_length=150, unique=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
                ('responsible_bodies', models.ManyToManyField(blank=True, related_name='action_plans', to='management_project.stakeholder')),
            ],
            options={
                'verbose_name': 'Strategic Action Plan',
                'verbose_name_plural': 'Strategic Action Plans',
                'ordering': ['strategic_cycle__start_date', '-id'],
            },
        ),
        migrations.CreateModel(
            name='DeductionAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.CharField(choices=[('correction', 'Correction'), ('overpayment', 'Overpayment'), ('retroactive_deduction', 'Retroactive Deduction'), ('deduction_adjustment', 'Deduction Adjustment'), ('court_order_payment', 'Court Ordered Deduction'), ('advance_recovery', 'Advance Recovery'), ('other_adjustment', 'Other Adjustment')], max_length=90)),
                ('component', models.CharField(choices=[('Deductions and Other Adjustments', [('charitable_donation', 'Charitable Donation'), ('saving_plan', 'Saving Plan'), ('loan_payment', 'Loan Payment'), ('court_order', 'Court Order'), ('workers_association', 'Workers Association'), ('personnel_insurance_saving', 'Personnel Insurance Saving'), ('red_cross', 'Red Cross'), ('party_contribution', 'Party Contribution'), ('other_deduction', 'Other Deduction')])], max_length=90)),
                ('deduction_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('adjusted_month_total_deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('recorded_month_total_deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('period_start', models.DateField(default=datetime.date.today)),
                ('period_end', models.DateField(default=datetime.date.today)),
                ('months_covered', models.IntegerField()),
                ('created_at', models.DateField(blank=True, default=datetime.date.today, help_text='Date when this record was created')),
                ('updated_at', models.DateField(default=datetime.date.today, help_text='Date when this record was last updated')),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
                ('payroll_needing_adjustment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management_project.strategicactionplan')),
                ('payroll_to_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deduction_adjustments', to='management_project.strategicactionplan')),
            ],
        ),
        migrations.CreateModel(
            name='StrategicCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for the strategic cycle', max_length=100)),
                ('time_horizon', models.CharField(choices=[('10 years', '10 years'), ('5 years', '5 years'), ('3 years', '3 years'), ('2 years', '2 years'), ('1 year', '1 year'), ('6 months', '6 months'), ('Quarterly', 'Quarterly'), ('Monthly', 'Monthly')], max_length=20)),
                ('time_horizon_type', models.CharField(choices=[('Long Term', 'Long Term'), ('Medium Term', 'Medium Term'), ('Short Term', 'Short Term')], max_length=20)),
                ('start_date', models.DateField(help_text='Exact start date of the strategic cycle')),
                ('end_date', models.DateField(help_text='Exact end date of the strategic cycle / report date')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='strategic_cycles', to='management_project.organizationalprofile')),
            ],
            options={
                'verbose_name': 'Strategic Cycle',
                'verbose_name_plural': 'Strategic Cycles',
                'ordering': ['start_date', '-id'],
            },
        ),
        migrations.AddField(
            model_name='strategicactionplan',
            name='strategic_cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_plans', to='management_project.strategiccycle'),
        ),
        migrations.CreateModel(
            name='StrategicReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement', models.DecimalField(decimal_places=2, default=0, max_digits=22)),
                ('percent_achieved', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('variance', models.DecimalField(decimal_places=2, default=0, max_digits=22)),
                ('weighted_score', models.DecimalField(decimal_places=2, default=0, max_digits=22)),
                ('data_source', models.CharField(blank=True, max_length=200, null=True)),
                ('data_collector', models.CharField(blank=True, max_length=200, null=True)),
                ('progress_summary', models.TextField(blank=True, null=True)),
                ('performance_summary', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the strategic plan', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='management_project.strategicactionplan')),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
            options={
                'verbose_name': 'Strategic Report',
                'verbose_name_plural': 'Strategic Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StrategyMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategic_perspective', models.CharField(max_length=100)),
                ('strategic_pillar', models.CharField(max_length=100)),
                ('objective', models.CharField(max_length=100)),
                ('kpi', models.CharField(max_length=100)),
                ('formula', models.CharField(blank=True, max_length=100)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
        ),
        migrations.AddField(
            model_name='strategicactionplan',
            name='strategy_map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_plans', to='management_project.strategymap'),
        ),
        migrations.CreateModel(
            name='SwotAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('swot_type', models.CharField(choices=[('Strength', 'Strength'), ('Weakness', 'Weakness'), ('Opportunity', 'Opportunity'), ('Threat', 'Threat')], max_length=20)),
                ('swot_pillar', models.CharField(max_length=100)),
                ('swot_factor', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('priority', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='Medium', max_length=10)),
                ('impact', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='Medium', max_length=10)),
                ('likelihood', models.CharField(blank=True, choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
            options={
                'ordering': ['swot_type', 'priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Values',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('values', models.CharField(choices=[('integrity', 'Integrity'), ('respect', 'Respect'), ('empathy', 'Empathy'), ('collaboration', 'Collaboration'), ('excellence', 'Excellence'), ('adaptability', 'Adaptability'), ('diversity_inclusion', 'Diversity & Inclusion'), ('courage', 'Courage'), ('humility', 'Humility'), ('resilience', 'Resilience'), ('accountability', 'Accountability'), ('learning_mindset', 'Continuous Learning'), ('customer_focus', 'Customer Focus'), ('trustworthiness', 'Trustworthiness'), ('quality', 'Quality'), ('responsiveness', 'Responsiveness'), ('fairness', 'Fairness'), ('loyalty', 'Loyalty'), ('service_orientation', 'Service Orientation'), ('customer_innovation', 'Customer-Centric Innovation'), ('sustainability', 'Sustainability'), ('responsibility', 'Responsibility'), ('ethics', 'Ethics'), ('transparency', 'Transparency'), ('equity', 'Equity'), ('community_focus', 'Community Focus'), ('environmental_stewardship', 'Environmental Stewardship'), ('social_responsibility', 'Social Responsibility'), ('strategic_thinking', 'Strategic Thinking'), ('vision', 'Vision'), ('integrity_leadership', 'Integrity in Leadership'), ('collaboration_governance', 'Collaboration'), ('risk_management', 'Risk Management'), ('accountability_governance', 'Accountability'), ('long_term_orientation', 'Long-Term Orientation'), ('innovation', 'Innovation'), ('responsible_tech_use', 'Responsible Use of Technology'), ('digital_adaptability', 'Digital Adaptability'), ('data_driven', 'Data-Driven Decision Making'), ('tech_learning', 'Continuous Tech Learning'), ('automation_ethics', 'Ethical Automation'), ('prudence', 'Prudence'), ('financial_responsibility', 'Financial Responsibility'), ('integrity_finance', 'Integrity'), ('risk_awareness', 'Risk Awareness'), ('transparency_finance', 'Transparency'), ('compliance', 'Regulatory Compliance'), ('budget_discipline', 'Budget Discipline'), ('cost_efficiency', 'Cost Efficiency'), ('creativity', 'Creativity'), ('entrepreneurial_mindset', 'Entrepreneurial Mindset'), ('agility', 'Agility'), ('continuous_improvement', 'Continuous Improvement'), ('visionary', 'Visionary Thinking'), ('opportunity_seeking', 'Opportunity Seeking'), ('collaboration_innovation', 'Collaborative Innovation'), ('efficiency', 'Efficiency'), ('quality_focus', 'Quality Focus'), ('process_excellence', 'Process Excellence'), ('customer_satisfaction', 'Customer Satisfaction'), ('safety', 'Safety'), ('reliability', 'Reliability'), ('lean_practices', 'Lean Practices'), ('brand_integrity', 'Brand Integrity'), ('reliability_reputation', 'Reliability'), ('trust', 'Trust'), ('social_image', 'Social Image'), ('authenticity', 'Authenticity'), ('emotional_connection', 'Emotional Connection'), ('community_engagement', 'Community Engagement'), ('volunteering', 'Volunteering'), ('philanthropy', 'Philanthropy'), ('diversity_advocacy', 'Diversity Advocacy'), ('social_impact', 'Social Impact'), ('education_support', 'Education Support')], max_length=50, unique=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Vision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vision_statement', models.CharField(max_length=500)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management_project.organizationalprofile')),
            ],
        ),
    ]

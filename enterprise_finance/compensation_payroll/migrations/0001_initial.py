# Generated by Django 5.2 on 2025-08-19 15:35

import compensation_payroll.models
import datetime
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EmploymentIncomeTaxBracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rate', models.DecimalField(decimal_places=2, help_text='Percentage rate (e.g., 10 for 10%)', max_digits=5)),
                ('deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
            ],
            options={
                'ordering': ['min_amount'],
            },
        ),
        migrations.CreateModel(
            name='FuelForWorkRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary_divisor', models.DecimalField(decimal_places=2, default=Decimal('4.00'), help_text='Divisor for salary to compute fuel limit (e.g., 4 means salary/4)', max_digits=5)),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('2200.00'), help_text='Maximum non-taxable cap for fuel for work', max_digits=10)),
            ],
            options={
                'verbose_name': 'Fuel for work Rate',
                'verbose_name_plural': 'Fuel for work Rate',
            },
        ),
        migrations.CreateModel(
            name='FuelHomeToOfficeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('600.00'), help_text='Maximum non-taxable amount for fuel home to office', max_digits=10)),
            ],
            options={
                'verbose_name': 'Fuel Home to Office Rate',
                'verbose_name_plural': 'Fuel Home to Office Rate',
            },
        ),
        migrations.CreateModel(
            name='HardshipAllowanceRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environment', models.CharField(choices=[('adverse', 'Adverse'), ('very_adverse', 'Very Adverse'), ('extremely_adverse', 'Extremely Adverse')], max_length=30, unique=True)),
                ('limit_percent', models.DecimalField(decimal_places=2, help_text='Percentage of basic salary allowed as non-taxable', max_digits=5)),
            ],
            options={
                'verbose_name': 'Hardship Allowance Rate',
                'verbose_name_plural': 'Hardship Allowance Rate',
            },
        ),
        migrations.CreateModel(
            name='OrganizationalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_name', models.CharField(max_length=80, unique=True)),
                ('organization_address', models.CharField(max_length=80)),
                ('employer_tin', models.CharField(max_length=90, verbose_name='Employer TIN')),
                ('organization_type', models.CharField(choices=[('sole_proprietorship', 'Sole Proprietorship'), ('partnership', 'Partnership'), ('corporation', 'Corporation'), ('joint_venture', 'Joint Venture'), ('cooperative', 'Cooperative'), ('non_profit', 'Non Profit'), ('non_governmental', 'Non Governmental'), ('governmental', 'Governmental'), ('other', 'Other')], max_length=70)),
                ('contact_personnel', models.CharField(max_length=90)),
            ],
            options={
                'verbose_name': 'Organizational Profile',
                'verbose_name_plural': '               Organizational Profile',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='OvertimeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.CharField(choices=[('evening', '6PM to 4PM'), ('night', '4PM to 6AM'), ('rest_day', 'Weekly Rest Day'), ('public_holiday', 'Public Holiday')], help_text='Type of overtime component', max_length=20, unique=True)),
                ('multiplier', models.DecimalField(decimal_places=2, default=1.0, help_text='Multiplier to apply to base hourly rate', max_digits=5)),
            ],
            options={
                'verbose_name': 'Overtime Rate',
                'verbose_name_plural': 'Overtime Rate',
            },
        ),
        migrations.CreateModel(
            name='PensionRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personnel_rate', models.DecimalField(decimal_places=4, default=Decimal('0.00'), help_text='Percentage of salary contributed by personnel', max_digits=5)),
                ('employer_rate', models.DecimalField(decimal_places=4, default=Decimal('0.00'), help_text='Percentage of salary contributed by employer', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerDiemRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('working_area', models.CharField(choices=[('government_official', 'Government Official'), ('non_governmental_manager', 'Non Governmental Manager'), ('deputy_non_governmental_manager', 'Deputy Non Governmental Manager'), ('non_governmental_expert', 'Non Governmental Expert'), ('construction_machinery_operator', 'Construction Machinery Operator'), ('other', 'Other')], max_length=50, unique=True)),
                ('percent_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Limit as percentage of salary', max_digits=5, null=True)),
                ('cap_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Cap in birr', max_digits=10, null=True)),
                ('fully_non_taxable', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TransportForWorkRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary_divisor', models.DecimalField(decimal_places=2, default=Decimal('4.00'), help_text='Divisor for salary to compute transport limit (e.g., 4 means salary/4)', max_digits=5)),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('2200.00'), help_text='Maximum non-taxable cap for transport for work', max_digits=10)),
            ],
            options={
                'verbose_name': 'Transport for work Rate',
                'verbose_name_plural': 'Transport for work Rate',
            },
        ),
        migrations.CreateModel(
            name='TransportHomeToOfficeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cap_amount', models.DecimalField(decimal_places=2, default=Decimal('600.00'), help_text='Maximum non-taxable amount for transport home to office', max_digits=10)),
            ],
            options={
                'verbose_name': 'Transport Home to Office Rate',
                'verbose_name_plural': 'Transport Home to Office Rate',
            },
        ),
        migrations.CreateModel(
            name='AbsenceDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_salary', models.DecimalField(decimal_places=2, max_digits=12)),
                ('absence_days', models.IntegerField()),
                ('absence_deduction_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('remaining_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
            ],
            options={
                'verbose_name': 'Absence Deduction',
                'verbose_name_plural': 'Absence Deductions',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PayrollPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(choices=[('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040')], default='2025', help_text='payroll processing year', max_length=4)),
                ('month', models.CharField(choices=[('01', 'September'), ('02', 'October'), ('03', 'November'), ('04', 'December'), ('05', 'January'), ('06', 'February'), ('07', 'March'), ('08', 'April'), ('09', 'May'), ('10', 'June'), ('11', 'July'), ('12', 'August')], default='August', help_text='payroll processing month', max_length=12)),
                ('payroll_month', models.CharField(blank=True, max_length=70)),
                ('slug', models.SlugField(unique=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
            ],
            options={
                'verbose_name': '              Payroll Month and Component',
                'verbose_name_plural': '              Payroll Month and Components',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PayrollMonthComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_basic_salary', models.BooleanField(default=False)),
                ('use_overtime', models.BooleanField(default=False)),
                ('use_housing_allowance', models.BooleanField(default=False)),
                ('use_position_allowance', models.BooleanField(default=False)),
                ('use_commission', models.BooleanField(default=False)),
                ('use_telephone_allowance', models.BooleanField(default=False)),
                ('use_one_time_bonus', models.BooleanField(default=False)),
                ('use_causal_labor_wage', models.BooleanField(default=False)),
                ('use_transport_home_to_office', models.BooleanField(default=False)),
                ('use_transport_for_work', models.BooleanField(default=False)),
                ('use_fuel_home_to_office', models.BooleanField(default=False)),
                ('use_fuel_for_work', models.BooleanField(default=False)),
                ('use_per_diem', models.BooleanField(default=False)),
                ('use_hardship_allowance', models.BooleanField(default=False)),
                ('use_public_cash_award', models.BooleanField(default=False)),
                ('use_incidental_operation_allowance', models.BooleanField(default=False)),
                ('use_medical_allowance', models.BooleanField(default=False)),
                ('use_cash_gift', models.BooleanField(default=False)),
                ('use_tuition_fees', models.BooleanField(default=False)),
                ('use_personal_injury', models.BooleanField(default=False)),
                ('use_child_support_payment', models.BooleanField(default=False)),
                ('use_charitable_donation', models.BooleanField(default=False)),
                ('use_saving_plan', models.BooleanField(default=False)),
                ('use_loan_payment', models.BooleanField(default=False)),
                ('use_court_order', models.BooleanField(default=False)),
                ('use_workers_association', models.BooleanField(default=False)),
                ('use_personnel_insurance_saving', models.BooleanField(default=False)),
                ('use_university_cost_share_pay', models.BooleanField(default=False)),
                ('use_red_cross', models.BooleanField(default=False)),
                ('use_party_contribution', models.BooleanField(default=False)),
                ('use_other_deduction', models.BooleanField(default=False)),
                ('slug', models.SlugField(unique=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
                ('payroll_month', models.ForeignKey(help_text='payroll processing month', on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.payrollperiod')),
            ],
            options={
                'verbose_name': '              Payroll Month and Component',
                'verbose_name_plural': '              Payroll Month and Components',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PersonnelList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personnel_id', models.CharField(max_length=50, verbose_name='Personnel ID')),
                ('first_name', models.CharField(max_length=50)),
                ('father_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('personnel_full_name', models.CharField(blank=True, max_length=90, null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=30)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full-time'), ('part_time', 'Part-time'), ('contract', 'Contract'), ('freelancers', 'Freelancers'), ('remote', 'Remote'), ('daily_worker', 'Daily Worker'), ('interns', 'Interns'), ('trainee', 'Trainee'), ('other', 'Other')], max_length=80)),
                ('email_address', models.EmailField(blank=True, max_length=70, null=True)),
                ('country_code', models.CharField(choices=[('+93', 'Afghanistan (+93) 🇦🇫'), ('+355', 'Albania (+355) 🇦🇱'), ('+213', 'Algeria (+213) 🇩🇿'), ('+376', 'Andorra (+376) 🇦🇩'), ('+244', 'Angola (+244) 🇦🇴'), ('+1', 'Antigua and Barbuda (+1) 🇦🇬'), ('+54', 'Argentina (+54) 🇦🇷'), ('+374', 'Armenia (+374) 🇦🇲'), ('+61', 'Australia (+61) 🇦🇺'), ('+43', 'Austria (+43) 🇦🇹'), ('+994', 'Azerbaijan (+994) 🇦🇿'), ('+1', 'Bahamas (+1) 🇧🇸'), ('+973', 'Bahrain (+973) 🇧🇭'), ('+880', 'Bangladesh (+880) 🇧🇩'), ('+1', 'Barbados (+1) 🇧🇧'), ('+375', 'Belarus (+375) 🇧🇾'), ('+32', 'Belgium (+32) 🇧🇪'), ('+501', 'Belize (+501) 🇧🇿'), ('+229', 'Benin (+229) 🇧🇯'), ('+975', 'Bhutan (+975) 🇧🇹'), ('+591', 'Bolivia (+591) 🇧🇴'), ('+387', 'Bosnia and Herzegovina (+387) 🇧🇦'), ('+267', 'Botswana (+267) 🇧🇼'), ('+55', 'Brazil (+55) 🇧🇷'), ('+673', 'Brunei (+673) 🇧🇳'), ('+359', 'Bulgaria (+359) 🇧🇬'), ('+226', 'Burkina Faso (+226) 🇧🇫'), ('+257', 'Burundi (+257) 🇧🇮'), ('+238', 'Cabo Verde (+238) 🇨🇻'), ('+855', 'Cambodia (+855) 🇰🇭'), ('+237', 'Cameroon (+237) 🇨🇲'), ('+1', 'Canada (+1) 🇨🇦'), ('+236', 'Central African Republic (+236) 🇨🇫'), ('+235', 'Chad (+235) 🇹🇩'), ('+56', 'Chile (+56) 🇨🇱'), ('+86', 'China (+86) 🇨🇳'), ('+57', 'Colombia (+57) 🇨🇴'), ('+269', 'Comoros (+269) 🇰🇲'), ('+243', 'Congo, Democratic Republic of the (+243) 🇨🇩'), ('+242', 'Congo, Republic of the (+242) 🇨🇬'), ('+506', 'Costa Rica (+506) 🇨🇷'), ('+385', 'Croatia (+385) 🇭🇷'), ('+53', 'Cuba (+53) 🇨🇺'), ('+357', 'Cyprus (+357) 🇨🇾'), ('+420', 'Czech Republic (+420) 🇨🇿'), ('+45', 'Denmark (+45) 🇩🇰'), ('+253', 'Djibouti (+253) 🇩🇯'), ('+1', 'Dominica (+1) 🇩🇲'), ('+1', 'Dominican Republic (+1) 🇩🇴'), ('+593', 'Ecuador (+593) 🇪🇨'), ('+20', 'Egypt (+20) 🇪🇬'), ('+503', 'El Salvador (+503) 🇸🇻'), ('+240', 'Equatorial Guinea (+240) 🇬🇶'), ('+291', 'Eritrea (+291) 🇪🇷'), ('+372', 'Estonia (+372) 🇪🇪'), ('+268', 'Eswatini (+268) 🇸🇿'), ('+251', 'Ethiopia (+251) 🇪🇹'), ('+679', 'Fiji (+679) 🇫🇯'), ('+358', 'Finland (+358) 🇫🇮'), ('+33', 'France (+33) 🇫🇷'), ('+241', 'Gabon (+241) 🇬🇦'), ('+220', 'Gambia (+220) 🇬🇲'), ('+995', 'Georgia (+995) 🇬🇪'), ('+49', 'Germany (+49) 🇩🇪'), ('+233', 'Ghana (+233) 🇬🇭'), ('+30', 'Greece (+30) 🇬🇷'), ('+1', 'Grenada (+1) 🇬🇩'), ('+502', 'Guatemala (+502) 🇬🇹'), ('+224', 'Guinea (+224) 🇬🇹'), ('+245', 'Guinea-Bissau (+245) 🇬🇼'), ('+592', 'Guyana (+592) 🇬🇾'), ('+509', 'Haiti (+509) 🇭🇹'), ('+504', 'Honduras (+504) 🇭🇳'), ('+36', 'Hungary (+36) 🇭🇺'), ('+354', 'Iceland (+354) 🇮🇸'), ('+91', 'India (+91) 🇮🇳'), ('+62', 'Indonesia (+62) 🇮🇩'), ('+98', 'Iran (+98) 🇮🇷'), ('+964', 'Iraq (+964) 🇮🇶'), ('+353', 'Ireland (+353) 🇮🇪'), ('+972', 'Israel (+972) 🇮🇱'), ('+39', 'Italy (+39) 🇮🇹'), ('+1', 'Jamaica (+1) 🇯🇲'), ('+81', 'Japan (+81) 🇯🇵'), ('+962', 'Jordan (+962) 🇯🇴'), ('+7', 'Kazakhstan (+7) 🇰🇿'), ('+254', 'Kenya (+254) 🇰🇪'), ('+686', 'Kiribati (+686) 🇰🇷'), ('+850', 'Korea, North (+850) 🇰🇵'), ('+82', 'Korea, South (+82) 🇰🇷'), ('+965', 'Kuwait (+965) 🇰🇼'), ('+996', 'Kyrgyzstan (+996) 🇰🇬'), ('+856', 'Laos (+856) 🇱🇦'), ('+371', 'Latvia (+371) 🇱🇻'), ('+961', 'Lebanon (+961) 🇱🇧'), ('+266', 'Lesotho (+266) 🇱🇸'), ('+231', 'Liberia (+231) 🇱🇷'), ('+218', 'Libya (+218) 🇱🇾'), ('+423', 'Liechtenstein (+423) 🇱🇮'), ('+370', 'Lithuania (+370) 🇱🇹'), ('+352', 'Luxembourg (+352) 🇱🇺'), ('+261', 'Madagascar (+261) 🇲🇬'), ('+265', 'Malawi (+265) 🇲🇼'), ('+60', 'Malaysia (+60) 🇲🇾'), ('+960', 'Maldives (+960) 🇲🇻'), ('+223', 'Mali (+223) 🇲🇱'), ('+356', 'Malta (+356) 🇲🇹'), ('+692', 'Marshall Islands (+692) 🇲🇭'), ('+222', 'Mauritania (+222) 🇲🇦'), ('+230', 'Mauritius (+230) 🇲🇺'), ('+52', 'Mexico (+52) 🇲🇽'), ('+691', 'Micronesia (+691) 🇫🇲'), ('+373', 'Moldova (+373) 🇲🇩'), ('+377', 'Monaco (+377) 🇲🇨'), ('+976', 'Mongolia (+976) 🇲🇳'), ('+382', 'Montenegro (+382) 🇲🇹'), ('+212', 'Morocco (+212) 🇲🇦'), ('+258', 'Mozambique (+258) 🇲🇿'), ('+95', 'Myanmar (+95) 🇲🇲'), ('+264', 'Namibia (+264) 🇳🇦'), ('+674', 'Nauru (+674) 🇦🇷'), ('+977', 'Nepal (+977) 🇳🇵'), ('+31', 'Netherlands (+31) 🇳🇱'), ('+64', 'New Zealand (+64) 🇳🇿'), ('+505', 'Nicaragua (+505) 🇳🇮'), ('+227', 'Niger (+227) 🇳🇪'), ('+234', 'Nigeria (+234) 🇳🇬'), ('+389', 'North Macedonia (+389) 🇲🇰'), ('+47', 'Norway (+47) 🇳🇴'), ('+968', 'Oman (+968) 🇴🇲'), ('+92', 'Pakistan (+92) 🇵🇰'), ('+680', 'Palau (+680) 🇵🇼'), ('+970', 'Palestine (+970) 🇵🇸'), ('+507', 'Panama (+507) 🇵🇦'), ('+675', 'Papua New Guinea (+675) 🇵🇬'), ('+595', 'Paraguay (+595) 🇵🇾'), ('+51', 'Peru (+51) 🇵🇪'), ('+63', 'Philippines (+63) 🇵🇭'), ('+48', 'Poland (+48) 🇵🇱'), ('+351', 'Portugal (+351) 🇵🇹'), ('+974', 'Qatar (+974) 🇶🇦'), ('+40', 'Romania (+40) 🇷🇴'), ('+7', 'Russia (+7) 🇷🇺'), ('+250', 'Rwanda (+250) 🇷🇼'), ('+1', 'Saint Kitts and Nevis (+1) 🇰🇳'), ('+1', 'Saint Lucia (+1) 🇱🇨'), ('+1', 'Saint Vincent and the Grenadines (+1) 🇻🇨'), ('+685', 'Samoa (+685) 🇼🇸'), ('+378', 'San Marino (+378) 🇸🇲'), ('+239', 'Sao Tome and Principe (+239) 🇸🇹'), ('+966', 'Saudi Arabia (+966) 🇸🇦'), ('+221', 'Senegal (+221) 🇸🇳'), ('+381', 'Serbia (+381) 🇷🇸'), ('+248', 'Seychelles (+248) 🇸🇨'), ('+232', 'Sierra Leone (+232) 🇸🇱'), ('+65', 'Singapore (+65) 🇸🇬'), ('+421', 'Slovakia (+421) 🇸🇰'), ('+386', 'Slovenia (+386) 🇸🇮'), ('+677', 'Solomon Islands (+677) 🇸🇧'), ('+252', 'Somalia (+252) 🇸🇴'), ('+27', 'South Africa (+27) 🇿🇦'), ('+211', 'South Sudan (+211) 🇸🇸'), ('+34', 'Spain (+34) 🇪🇸'), ('+94', 'Sri Lanka (+94) 🇱🇰'), ('+249', 'Sudan (+249) 🇸🇩'), ('+597', 'Suriname (+597) 🇸🇷'), ('+46', 'Sweden (+46) 🇸🇪'), ('+41', 'Switzerland (+41) 🇨🇭'), ('+963', 'Syria (+963) 🇸🇾'), ('+886', 'Taiwan (+886) 🇹🇼'), ('+992', 'Tajikistan (+992) 🇹🇯'), ('+255', 'Tanzania (+255) 🇹🇿'), ('+66', 'Thailand (+66) 🇹🇭'), ('+670', 'Timor-Leste (+670) 🇹🇱'), ('+228', 'Togo (+228) 🇹🇬'), ('+676', 'Tonga (+676) 🇹🇴'), ('+1', 'Trinidad and Tobago (+1) 🇹🇹'), ('+216', 'Tunisia (+216) 🇹🇳'), ('+90', 'Turkey (+90) 🇹🇷'), ('+993', 'Turkmenistan (+993) 🇹🇲'), ('+688', 'Tuvalu (+688) 🇹🇻'), ('+256', 'Uganda (+256) 🇺🇬'), ('+380', 'Ukraine (+380) 🇺🇦'), ('+971', 'United Arab Emirates (+971) 🇦🇪'), ('+44', 'United Kingdom (+44) 🇬🇧'), ('+1', 'United States (+1) 🇺🇸'), ('+598', 'Uruguay (+598) 🇺🇾'), ('+998', 'Uzbekistan (+998) 🇺🇿'), ('+678', 'Vanuatu (+678) 🇻🇺'), ('+379', 'Vatican City (+379) 🇻🇦'), ('+58', 'Venezuela (+58) 🇻🇪'), ('+84', 'Vietnam (+84) 🇻🇳'), ('+967', 'Yemen (+967) 🇾🇪'), ('+260', 'Zambia (+260) 🇿🇲'), ('+263', 'Zimbabwe (+263) 🇿🇼')], default='+251', help_text='Select the country code.', max_length=4)),
                ('phone_number', models.CharField(help_text='Enter the phone number.', max_length=12, validators=[compensation_payroll.models.validate_phone_number])),
                ('city', models.CharField(max_length=90)),
                ('section', models.CharField(blank=True, help_text='you can fill name of department, team, etc', max_length=50, null=True)),
                ('position_name', models.CharField(blank=True, max_length=90, null=True)),
                ('working_area', models.CharField(choices=[('government_official', 'Government Official'), ('non_governmental_manager', 'Non Governmental Manager'), ('deputy_non_governmental_manager', 'Deputy Non Governmental Manager'), ('non_governmental_expert', 'Non Governmental Expert'), ('construction_machinery_operator', 'Construction Machinery Operator'), ('other', 'Other')], max_length=90)),
                ('pension_number', models.CharField(max_length=30)),
                ('personnel_tin', models.CharField(max_length=90, verbose_name='Personnel TIN')),
                ('basic_salary', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('daily_per_diem', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Daily per diem rate paid when traveling outside the working area.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('university_cost_sharing_debt', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('work_experience', models.PositiveIntegerField(default=0)),
                ('working_environment', models.CharField(choices=[('excellent', 'Excellent'), ('very_good', 'Very Good'), ('good', 'Good'), ('medium', 'Medium'), ('adverse', 'Adverse'), ('very_adverse', 'Very Adverse'), ('extremely_adverse', 'Extremely Adverse')], help_text='cautious: Hardship Allowance Tax Will Be Calculated Based On This Working Environment And The Amount Of Hardship Allowance', max_length=70)),
                ('bank_name', models.CharField(blank=True, help_text='Indicate Branch Name', max_length=70, null=True)),
                ('bank_account_id', models.CharField(blank=True, max_length=70, null=True)),
                ('bank_account_type', models.CharField(blank=True, choices=[('checking_account', 'Checking Account'), ('savings_account', 'Savings Account'), ('other', 'Other')], max_length=70, null=True)),
                ('registration_date', models.DateField(default=datetime.date.today)),
                ('slug', models.SlugField()),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
            ],
            options={
                'verbose_name': 'Personnel List',
                'verbose_name_plural': '              Personnel List',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='RegularPayroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basic_salary', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly pay for work done', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('overtime_hours_from_six_pm_to_four_pm', models.IntegerField(blank=True, help_text='Total over time hour from 6 pm to 4 pm with in a pay month', null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('overtime_hours_from_four_pm_to_six_am', models.IntegerField(blank=True, help_text='Total over time hour from 4 pm to 6 am with in a pay month', null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('overtime_hours_in_weekly_rest_day', models.IntegerField(blank=True, help_text='Total over time hour in weekly rest day - saturday and sunday with in a pay month', null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('overtime_hours_in_public_holiday', models.IntegerField(blank=True, help_text='Total over time hour in public holiday with in a pay month', null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('overtime', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('housing_allowance', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('position_allowance', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('commission', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('telephone_allowance', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('one_time_bonus', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('causal_labor_wage', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('transport_home_to_office', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly transport allowance for home to office transport', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('transport_home_to_office_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('transport_home_to_office_non_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('fuel_home_to_office', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly fuel allowance for home to office transport', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fuel_home_to_office_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('fuel_home_to_office_non_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('transport_for_work', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly transport allowance for work purposes', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('transport_for_work_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('transport_for_work_non_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('fuel_for_work', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly fuel allowance for work purposes', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fuel_for_work_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('fuel_for_work_non_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('per_diem', models.DecimalField(blank=True, decimal_places=2, help_text='Per diem per day or daily per diem', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('per_diem_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('per_diem_non_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('hardship_allowance', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly allowance for working in unfavorable conditions', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('hardship_allowance_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('hardship_allowance_non_taxable', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('public_cash_award', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('incidental_operation_allowance', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('medical_allowance', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cash_gift', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tuition_fees', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('personal_injury', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('child_support_payment', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('charitable_donation', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('saving_plan', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('loan_payment', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('court_order', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('workers_association', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('personnel_insurance_saving', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_share_percent_to_basic_salary', models.DecimalField(blank=True, decimal_places=2, help_text='Percent of cost share deduction from agreed basic salary with in a month', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('university_cost_share_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('red_cross', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('party_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('other_deduction', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('employment_income_tax', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('employee_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('employer_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('gross_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('gross_non_taxable_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('gross_taxable_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_payroll_deduction', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('net_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('expense', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=70, null=True)),
                ('bank_account_id', models.CharField(blank=True, max_length=70, null=True)),
                ('bank_account_type', models.CharField(blank=True, max_length=70, null=True)),
                ('processing_date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
                ('payroll_month', models.ForeignKey(help_text='Payroll processing month', on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.payrollmonthcomponent')),
                ('personnel_full_name', models.ForeignKey(help_text='Please select personnel full name', on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.personnellist')),
            ],
            options={
                'verbose_name': '             Regular Payroll',
                'verbose_name_plural': '             Regular Payroll',
                'ordering': ['payroll_month', '-id'],
            },
        ),
        migrations.CreateModel(
            name='EarningAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.CharField(choices=[('Financial Corrections', [('underpayment', 'Underpayment'), ('overpayment', 'Overpayment'), ('deduction_error', 'Deduction Error'), ('correction', 'Correction')]), ('Retroactive Changes', [('salary_increment', 'Salary Increment'), ('backpay', 'Backpay'), ('contract_revision', 'Contract Revision')]), ('Absence or Delay', [('unpaid_leave_deduction', 'Unpaid Leave Deduction'), ('late_payment', 'Late Payment')]), ('Benefit and Bonus Changes', [('allowance_addition', 'Allowance Addition'), ('bonus_adjustment', 'Bonus Adjustment')]), ('Internal Movements', [('transfer_adjustment', 'Transfer Adjustment')]), ('Other', [('other', 'Other')])], max_length=90)),
                ('component', models.CharField(choices=[('Correction and Unpaid - Fully Taxable Components', [('basic_salary', 'Basic Salary'), ('overtime', 'Overtime'), ('housing_allowance', 'Housing Allowance'), ('position_allowance', 'Position Allowance'), ('commission', 'Commission'), ('telephone_allowance', 'Telephone Allowance'), ('one_time_bonus', 'One Time Bonus'), ('casual_labor_wage', 'Casual Labor Wage')]), ('Correction and Unpaid - Partially Taxable Components', [('transport_home_to_office', 'Transport Home To Office'), ('transport_for_work', 'Transport For Work'), ('fuel_home_to_office', 'Fuel Home To Office'), ('fuel_for_work', 'Fuel For Work'), ('per_diem', 'Per Diem'), ('hardship_allowance', 'Hardship Allowance')]), ('Correction and Unpaid - Non-Taxable Components', [('public_cash_award', 'Public Cash Award'), ('incidental_operation_allowance', 'Incidental Operation Allowance'), ('medical_allowance', 'Medical Allowance'), ('cash_gift', 'Cash Gift'), ('personal_injury', 'Personal Injury'), ('child_support_payment', 'Child Support Payment'), ('tuition_fees', 'Tuition Fees')]), ('DEFERRED_EARNINGS', [('leave_encashment', 'Leave Encashment'), ('quarterly_bonus', 'Quarterly Bonus'), ('semi_annual_bonus', 'Semi-Annual Bonus'), ('annual_bonus', 'Annual Bonus'), ('performance_based_bonuses', 'Performance-Based Bonuses'), ('project_completion_bonuses', 'Project Completion Bonuses'), ('holiday_bonus', 'Holiday Bonus'), ('other_bonus', 'Other Type of Bonus')])], max_length=90)),
                ('earning_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('taxable', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('non_taxable', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('employee_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('employer_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_pension', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('adjusted_month_gross_taxable_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_gross_non_taxable_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_gross_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_total_taxable_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_employment_income_tax_total', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_employment_income_tax', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_employee_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('adjusted_month_employer_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('adjusted_month_total_pension', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('adjusted_month_total_earning_deduction', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('adjusted_month_expense', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('recorded_month_employee_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('recorded_month_employer_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('recorded_month_total_pension_contribution', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('recorded_month_taxable_gross_pay', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_non_taxable_gross_pay', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_gross_pay', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_total_taxable_pay', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_employment_income_tax_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_employment_income_tax', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_total_earning_deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('recorded_month_expense', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('period_start', models.DateField(default=datetime.date.today)),
                ('period_end', models.DateField(default=datetime.date.today)),
                ('months_covered', models.IntegerField()),
                ('created_at', models.DateField(blank=True, default=datetime.date.today, help_text='Date when this record was created')),
                ('updated_at', models.DateField(default=datetime.date.today, help_text='Date when this record was last updated')),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
                ('payroll_needing_adjustment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='compensation_payroll.regularpayroll')),
                ('payroll_to_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earning_adjustments', to='compensation_payroll.regularpayroll')),
            ],
        ),
        migrations.CreateModel(
            name='DeductionAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.CharField(choices=[('correction', 'Correction'), ('overpayment', 'Overpayment'), ('retroactive_deduction', 'Retroactive Deduction'), ('deduction_adjustment', 'Deduction Adjustment'), ('court_order_payment', 'Court Ordered Deduction'), ('advance_recovery', 'Advance Recovery'), ('other_adjustment', 'Other Adjustment')], max_length=90)),
                ('component', models.CharField(choices=[('Deductions and Other Adjustments', [('charitable_donation', 'Charitable Donation'), ('saving_plan', 'Saving Plan'), ('loan_payment', 'Loan Payment'), ('court_order', 'Court Order'), ('workers_association', 'Workers Association'), ('personnel_insurance_saving', 'Personnel Insurance Saving'), ('red_cross', 'Red Cross'), ('party_contribution', 'Party Contribution'), ('other_deduction', 'Other Deduction')])], max_length=90)),
                ('deduction_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('adjusted_month_total_deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('recorded_month_total_deduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('period_start', models.DateField(default=datetime.date.today)),
                ('period_end', models.DateField(default=datetime.date.today)),
                ('months_covered', models.IntegerField()),
                ('created_at', models.DateField(blank=True, default=datetime.date.today, help_text='Date when this record was created')),
                ('updated_at', models.DateField(default=datetime.date.today, help_text='Date when this record was last updated')),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
                ('payroll_needing_adjustment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='compensation_payroll.regularpayroll')),
                ('payroll_to_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deduction_adjustments', to='compensation_payroll.regularpayroll')),
            ],
        ),
        migrations.CreateModel(
            name='SeverancePay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severance_type', models.CharField(choices=[('normal', 'Normal Termination of contract'), ('no_notice', 'Termination Without Prior Notice'), ('harassment', 'Sexual Harassment')], default='normal', max_length=150)),
                ('last_week_daily_wages', models.DecimalField(decimal_places=2, help_text='Enter the daily wage amount for the last week. If the amount is the same throughout the month, divide the this_month_total salary by 30.', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('start_date', models.DateField(help_text='Enter the start date of employment.', verbose_name='Service Start Date')),
                ('end_date', models.DateField(default=datetime.date.today, help_text='Enter the end date of employment.', verbose_name='Service End Date')),
                ('service_years', models.PositiveIntegerField(blank=True)),
                ('service_days', models.PositiveIntegerField(blank=True)),
                ('severance_for_years', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('severance_for_days', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('gross_severance_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('basic_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('prorate_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('employment_income_tax_from_basic_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('total_employment_income_tax_from_basic_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('employment_income_tax_from_prorate_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('employment_income_tax_from_severance_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('net_severance_pay', models.DecimalField(blank=True, decimal_places=2, max_digits=12)),
                ('organization_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.organizationalprofile')),
                ('personnel_full_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='personnel_severance_pay', to='compensation_payroll.personnellist')),
                ('severance_record_month', models.ForeignKey(help_text='Severance processing month', on_delete=django.db.models.deletion.PROTECT, to='compensation_payroll.payrollperiod')),
            ],
            options={
                'verbose_name': '             Severance Pay',
                'verbose_name_plural': '             Severance Pay',
                'ordering': ['-id'],
            },
        ),
    ]
